module Language.NStar.CodeGen.Machine.X64.Call
( -- * Instruction encoding
  -- $encoding

  -- * Compiling
compileCall
) where

import Language.NStar.Syntax.Core (Expr(..), Type)
import Language.NStar.CodeGen.Compiler (Compiler)
import Language.NStar.CodeGen.Machine.Internal.Intermediate (InterOpcode(..))
import Data.Located (unLoc)
import Internal.Error (internalError)

{- $encoding

+-------------+---------------+-------+-------------+-----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|    Opcode   |  Instruction  | Op/En | 64-bit Mode | Compat/Leg Mode |                                                                                                                       Description                                                                                                                       |
+=============+===============+=======+=============+=================+=========================================================================================================================================================================================================================================================+
|    E8 cw    |   CALL rel16  |   D   |     N.S.    |      Valid      |                                                                                             Call near, relative, displacement relative to next instruction.                                                                                             |
+-------------+---------------+-------+-------------+-----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|    E8 cd    |   CALL rel32  |   D   |    Valid    |      Valid      |                                                               Call near, relative, displacement relative to next instruction. 32-bit displacement sign extended to 64-bits in 64-bit mode.                                                              |
+-------------+---------------+-------+-------------+-----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|    FF /2    |   CALL r/m16  |   M   |     N.E.    |      Valid      |                                                                                                  Call near, absolute indirect, address given in r/m16.                                                                                                  |
+-------------+---------------+-------+-------------+-----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|    FF /2    |   CALL r/m32  |   M   |     N.E.    |      Valid      |                                                                                                  Call near, absolute indirect, address given in r/m32.                                                                                                  |
+-------------+---------------+-------+-------------+-----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|    FF /2    |   CALL r/m64  |   M   |    Valid    |       N.E.      |                                                                                                  Call near, absolute indirect, address given in r/m64.                                                                                                  |
+-------------+---------------+-------+-------------+-----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|    9A cd    | CALL ptr16:16 |   D   |   Invalid   |      Valid      |                                                                                                      Call far, absolute, address given in operand.                                                                                                      |
+-------------+---------------+-------+-------------+-----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|    9A cp    | CALL ptr16:32 |   D   |   Invalid   |      Valid      |                                                                                                      Call far, absolute, address given in operand.                                                                                                      |
+-------------+---------------+-------+-------------+-----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|    FF /3    |  CALL m16:16  |   M   |    Valid    |      Valid      | Call far, absolute indirect address given in m16:16. In 32-bit mode: if selector points to a gate, then RIP = 32-bit zero extended displacement taken from gate; else RIP = zero extended 16-bit offset from far pointer referenced in the instruction. |
+-------------+---------------+-------+-------------+-----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|    FF /3    |  CALL m16:32  |   M   |    Valid    |      Valid      |                                   In 64-bit mode: If selector points to a gate, then RIP = 64-bit displacement taken from gate; else RIP = zero extended 32-bit offset from far pointer referenced in the instruction.                                  |
+-------------+---------------+-------+-------------+-----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| REX.W FF /3 |  CALL m16:64  |   M   |    Valid    |       N.E.      |                                          In 64-bit mode: If selector points to a gate, then RIP = 64-bit displacement taken from gate; else RIP = 64-bit offset from far pointer referenced in the instruction.                                         |
+-------------+---------------+-------+-------------+-----------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

< > {- Blank line -}

+-------+---------------+-----------+-----------+-----------+
| Op/En |   Operand 1   | Operand 2 | Operand 3 | Operand 4 |
+=======+===============+===========+===========+===========+
|   D   |     Offset    |     NA    |     NA    |     NA    |
+-------+---------------+-----------+-----------+-----------+
|   M   | ModRM:r/m (r) |     NA    |     NA    |     NA    |
+-------+---------------+-----------+-----------+-----------+

-}

compileCall :: Expr -> [Type] -> Compiler [InterOpcode]
compileCall (Name n) [] = pure [Byte 0xE8, Jump (unLoc n)]
compileCall e ts        = internalError $ "Unsupported instruction 'call " <> show e <> " " <> show ts <> "'."
